// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ValueType {
  YES
  NO
  PANDDING
}

model User {
  id        String   @id @default(cuid())
  firstname String
  lastname  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups           Group[]
  sentRequests     FriendRequest[]   @relation("sentRequests")
  receivedRequests FriendRequest[]   @relation("receivedRequests")
  posts            Post[]
  comments         Comment[]
  commentReactions ReactionComment[]
  postReactions    ReactionPost[]
  groupRequests    GroupRequest[]
  participants     Participant[]
  messages         Message[]

  @@unique(id, name: "User_sender_key")
  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment      Comment[]
  postReaction ReactionPost[]
  createdBy    User           @relation(fields: [id], references: [id])

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  commentReaction ReactionComment[]
  postReaction    ReactionPost[]
  createdBy       String
  user            User              @relation(fields: [createdBy], references: [id])
  postId          String
  post            Post              @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [id], references: [id])

  groupRequests GroupRequest[]

  @@map("groups")
}

model ChatRoom {
  id String @id @default(cuid())

  participants Participant[]
  messages     Message[]

  @@map("chat-rooms")
}

model ReactionComment {
  reactionComment String    @id @default(cuid())
  createdBy       String
  user            User      @relation(fields: [createdBy], references: [id])
  commentId       String
  comment         Comment   @relation(fields: [commentId], references: [id])
  status          ValueType @map("value-type")
}

model ReactionPost {
  reactionPost String    @id @default(cuid())
  createdBy    String
  user         User      @relation(fields: [createdBy], references: [id])
  postId       String
  post         Post      @relation(fields: [postId], references: [id])
  commentId    String
  comment      Comment   @relation(fields: [commentId], references: [id])
  status       ValueType @map("value-type")
}

model FriendRequest {
  receiver   User      @relation("receivedRequests", fields: [receiverId], references: [id])
  receiverId String
  sender     User?     @relation("sentRequests", fields: [senderId], references: [id])
  senderId   String
  status     ValueType @map("value-type")

  @@id([receiverId, senderId])
}

model GroupRequest {
  groupId String    @id @default(cuid())
  group   Group     @relation(fields: [groupId], references: [id])
  sender  String
  user    User      @relation(fields: [sender], references: [id])
  status  ValueType @map("value-type")
}

model Participant {
  userId   String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  roomId   String
  chatRoom ChatRoom @relation(fields: [roomId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomId    String
  chatRoom  ChatRoom @relation(fields: [roomId], references: [id])
  sender    String
  user      User     @relation(fields: [sender], references: [id])
}
